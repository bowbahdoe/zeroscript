'''
zeroscript DSL for zero robotics
'''

VALID_START_TOKENS = ('P', 'A')

def read_in_file(filename):
    '''
    reads in the zeroscript file given by the filename
    and returns the file as a list of strings with whitespace stripped
    '''
    with open(filename) as zeroscript_file:
        return [line.strip() for line in zeroscript_file]

def trim_out_comment_lines(list_of_lines):
    '''
    Takes in a list of lines from the zeroscript file and
    removes those that are clearly invalid
    '''
    for line in list_of_lines:
        if len(line) < 1:
            continue
        elif line[0] not in VALID_START_TOKENS:
            continue
        elif line[1] not in (" ", "\t"):
            continue
        else:
            yield line

def compress_extra_characters(list_of_lines):
    '''
    replaces all sequences of tabs, spaces, commas,
    and parens with a single tab
    '''
    for line in list_of_lines:
        for char in (' ', ',', '(', ')'):
            line = line.replace(char, '\t')
        while '\t\t' in line:
            line = line.replace('\t\t', '\t')
        yield line


def extract_arguments(list_of_lines):
    '''
    takes an iterable of properly formatted code lines
    and returns a generator that yields the line split
    by tabs
    '''
    for line in list_of_lines:
        yield line.split('\t')

class CCode:
    '''
    Class to abstract the additions to the c code 
    made by each command
    '''
    def __init__(self, body_code = '', init_code= '', head_code = ''):
        self.head_code = head_code
        self.init_code = init_code
        self.body_code = body_code

class FinalCode(CCode):
    '''
    Class to represent the final generated code of the
    translation from zs -> c
    '''
    def __init__(self):
        super().__init__()
        self.code_template ='''
{0}
static unsigned int counter;
void init(){{{1}}}
void loop(){{{2}counter++;}}'''
    def add_code(self, new_code):
        '''
        Adds the CCode supplied to the list of
        CCode to be included
        '''
        self.head_code += new_code.head_code
        self.init_code += new_code.init_code
        self.body_code += new_code.body_code
        
    def render_final_code(self):
        '''
        returns as a string the final c code generated by the
        transpiler
        '''
        return self.code_template.format(self.head_code,
                                         self.init_code,
                                         self.body_code)

def handle_position_set(arguments, line_number, first_conditional = False):
    '''
    generates a CCode object for a position command given the line number
    it was at in the source code
    '''
    
    body_code = ''
    if first_conditional:
        body_code += 'if(counter'
    else:
        body_code += 'else if(counter'
    
    if len(arguments) == 5:
        body_code += '>= {0} && counter <= {1})'.format(arguments[3], arguments[4])
    elif len(arugments) == 4:
        body_code += '== {0})'.format(arguments[3])
    else:
        raise SyntaxError('Position command not properly structured')
    
    head_code =  'static float pos{0}[3];'.format(line_number)
    init_code = 'pos{0}[0]={1};pos{0}[1]={2};pos{0}[2]={3};'.format(line_number,
                                                    arguments[0],
                                                    arguments[1],
                                                    arguments[2])
    body_code += '{{api.setPositionTarget(pos{0});}}'.format(line_number)
    
    return CCode(body_code,init_code, head_code)

def handle_action_call(arguments, line_number, first_conditional = False):
    body_code = ''
    if first_conditional:
        body_code += 'if(counter == {0}){{'.format(arguments[1])
    else:
        body_code += 'else if(counter == {0}){{'.format(arguments[1])
    
    body_code += '{0}();}}'.format(arguments[0])
    
    return CCode(body_code)

def parse_commands(commands_list):
    fc = FinalCode()
    first = True
    for lineno, command in enumerate(commands_list):
        if command[0] == 'P':
            fc.add_code(handle_position_set(command[1:], lineno+1, first))
            first = False
        elif command[0] == 'A':
            fc.add_code(handle_action_call(command[1:],lineno+1, first))
            first = False
    return fc.render_final_code()
def translate_code(filename):
    '''
    Translates zeroscript to c code
    '''
    return parse_commands(
        extract_arguments(
            compress_extra_characters(
                trim_out_comment_lines(
                    read_in_file(filename)))))

if __name__ == '__main__':
    import sys
    print(translate_code(sys.argv[1]).strip())